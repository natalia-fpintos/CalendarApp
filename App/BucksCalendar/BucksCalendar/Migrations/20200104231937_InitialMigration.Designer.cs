// <auto-generated />
using System;
using BucksCalendar.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BucksCalendar.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20200104231937_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BucksCalendar.Areas.Identity.Data.CalendarUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "d52e2e23-d9d8-44a9-b3fe-c67b110e3998",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e4232d05-6df2-459a-beb3-8b3d15a05faf",
                            Email = "theadmin@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            Name = "Admin",
                            NormalizedEmail = "THEADMIN@ADMIN.COM",
                            NormalizedUserName = "THEADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFrrxyboyIB1RkasF2XjHD9Oa0Z/Jo3tVqIH74oePSKZVJasx8dgKjGlRL+qwkRr2g==",
                            PhoneNumberConfirmed = false,
                            Role = "Admin",
                            SecurityStamp = "AQAAAAEAACcQAAAAEFrrxyboyIB1RkasF2XjHD9Oa0Z/Jo3tVqIH74oePSKZVJasx8dgKjGlRL+qwkRr2g==",
                            TwoFactorEnabled = false,
                            UserName = "theadmin@admin.com"
                        });
                });

            modelBuilder.Entity("BucksCalendar.Models.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("CategoryID");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            CategoryID = 1,
                            Type = 0
                        },
                        new
                        {
                            CategoryID = 2,
                            Type = 1
                        },
                        new
                        {
                            CategoryID = 3,
                            Type = 2
                        },
                        new
                        {
                            CategoryID = 4,
                            Type = 3
                        },
                        new
                        {
                            CategoryID = 5,
                            Type = 4
                        });
                });

            modelBuilder.Entity("BucksCalendar.Models.Event", b =>
                {
                    b.Property<int>("EventID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllDayEvent")
                        .HasColumnType("bit");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("EventID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("UserID");

                    b.ToTable("Event");

                    b.HasData(
                        new
                        {
                            EventID = 1,
                            AllDayEvent = false,
                            CategoryID = 1,
                            Description = "In this lecture we will review the tutorial for Razor Pages with Entity Framework and will learn about database migrations.",
                            EndDateTime = new DateTime(2019, 12, 6, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Uxbridge Campus - CS Lab",
                            StartDateTime = new DateTime(2019, 12, 6, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Web Applications",
                            UserID = "d52e2e23-d9d8-44a9-b3fe-c67b110e3998"
                        },
                        new
                        {
                            EventID = 2,
                            AllDayEvent = false,
                            CategoryID = 1,
                            Description = "A chance to work on our projects and ask any questions before the holidays.",
                            EndDateTime = new DateTime(2019, 12, 13, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Uxbridge Campus - CS Lab",
                            StartDateTime = new DateTime(2019, 12, 13, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Web Applications",
                            UserID = "d52e2e23-d9d8-44a9-b3fe-c67b110e3998"
                        },
                        new
                        {
                            EventID = 3,
                            AllDayEvent = false,
                            CategoryID = 2,
                            Description = "Please ensure you review the assessment guide before you submit the document. Submit all logbooks as a single Word file.",
                            EndDateTime = new DateTime(2019, 12, 16, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDateTime = new DateTime(2019, 12, 16, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "CW1-B (Logbook)",
                            UserID = "d52e2e23-d9d8-44a9-b3fe-c67b110e3998"
                        },
                        new
                        {
                            EventID = 4,
                            AllDayEvent = true,
                            CategoryID = 3,
                            EndDateTime = new DateTime(2019, 12, 20, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDateTime = new DateTime(2019, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Self-study day",
                            UserID = "d52e2e23-d9d8-44a9-b3fe-c67b110e3998"
                        },
                        new
                        {
                            EventID = 5,
                            AllDayEvent = false,
                            CategoryID = 3,
                            EndDateTime = new DateTime(2019, 12, 6, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDateTime = new DateTime(2019, 12, 6, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Natalia WFH",
                            UserID = "d52e2e23-d9d8-44a9-b3fe-c67b110e3998"
                        },
                        new
                        {
                            EventID = 6,
                            AllDayEvent = true,
                            CategoryID = 4,
                            Description = "Going home for Christmas!",
                            EndDateTime = new DateTime(2019, 12, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDateTime = new DateTime(2019, 12, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Natalia on AL",
                            UserID = "d52e2e23-d9d8-44a9-b3fe-c67b110e3998"
                        },
                        new
                        {
                            EventID = 7,
                            AllDayEvent = false,
                            CategoryID = 4,
                            EndDateTime = new DateTime(2019, 12, 13, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDateTime = new DateTime(2019, 12, 12, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Wafa on AL",
                            UserID = "d52e2e23-d9d8-44a9-b3fe-c67b110e3998"
                        },
                        new
                        {
                            EventID = 8,
                            AllDayEvent = true,
                            CategoryID = 5,
                            Description = "Merry Christmas!",
                            EndDateTime = new DateTime(2019, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDateTime = new DateTime(2019, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Christmas Bank Holiday",
                            UserID = "d52e2e23-d9d8-44a9-b3fe-c67b110e3998"
                        });
                });

            modelBuilder.Entity("BucksCalendar.Models.Notification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EventID")
                        .HasColumnType("int");

                    b.Property<bool>("NotifyByEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("NotifyBySMS")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ScheduledFor")
                        .HasColumnType("datetime2");

                    b.HasKey("NotificationID");

                    b.HasIndex("EventID")
                        .IsUnique();

                    b.ToTable("Notification");

                    b.HasData(
                        new
                        {
                            NotificationID = 1,
                            EventID = 1,
                            NotifyByEmail = true,
                            NotifyBySMS = true,
                            ScheduledFor = new DateTime(2019, 12, 5, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            NotificationID = 2,
                            EventID = 2,
                            NotifyByEmail = true,
                            NotifyBySMS = true,
                            ScheduledFor = new DateTime(2019, 12, 12, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            NotificationID = 3,
                            EventID = 3,
                            NotifyByEmail = true,
                            NotifyBySMS = false,
                            ScheduledFor = new DateTime(2019, 12, 13, 14, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            NotificationID = 4,
                            EventID = 8,
                            NotifyByEmail = false,
                            NotifyBySMS = true,
                            ScheduledFor = new DateTime(2019, 12, 24, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("BucksCalendar.Models.NotificationLog", b =>
                {
                    b.Property<int>("NotificationLogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateSent")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EventID")
                        .HasColumnType("int");

                    b.Property<int>("NotificationID")
                        .HasColumnType("int");

                    b.Property<string>("NotificationType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationLogID");

                    b.HasIndex("EventID");

                    b.HasIndex("NotificationID");

                    b.ToTable("NotificationLog");
                });

            modelBuilder.Entity("BucksCalendar.Models.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CanAddAnnualLeave")
                        .HasColumnType("bit");

                    b.Property<bool>("CanAddBankHolidays")
                        .HasColumnType("bit");

                    b.Property<bool>("CanAddDeadline")
                        .HasColumnType("bit");

                    b.Property<bool>("CanAddLecture")
                        .HasColumnType("bit");

                    b.Property<bool>("CanAddWFH")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("RoleID");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            RoleID = 1,
                            CanAddAnnualLeave = true,
                            CanAddBankHolidays = true,
                            CanAddDeadline = true,
                            CanAddLecture = true,
                            CanAddWFH = true,
                            Type = 0
                        },
                        new
                        {
                            RoleID = 2,
                            CanAddAnnualLeave = true,
                            CanAddBankHolidays = true,
                            CanAddDeadline = true,
                            CanAddLecture = true,
                            CanAddWFH = true,
                            Type = 1
                        },
                        new
                        {
                            RoleID = 3,
                            CanAddAnnualLeave = true,
                            CanAddBankHolidays = false,
                            CanAddDeadline = false,
                            CanAddLecture = false,
                            CanAddWFH = true,
                            Type = 2
                        });
                });

            modelBuilder.Entity("BucksCalendar.Models.UserPreference", b =>
                {
                    b.Property<int>("UserPreferenceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AnnualLeaveNotificationsEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("AnnualLeaveNotificationsSMS")
                        .HasColumnType("bit");

                    b.Property<bool>("BankHolidayNotificationsEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("BankHolidayNotificationsSMS")
                        .HasColumnType("bit");

                    b.Property<bool>("ConsentEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("ConsentSMS")
                        .HasColumnType("bit");

                    b.Property<bool>("DeadlineNotificationsEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("DeadlineNotificationsSMS")
                        .HasColumnType("bit");

                    b.Property<bool>("LectureNotificationsEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("LectureNotificationsSMS")
                        .HasColumnType("bit");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("WFHNotificationsEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("WFHNotificationsSMS")
                        .HasColumnType("bit");

                    b.HasKey("UserPreferenceID");

                    b.ToTable("UserPreference");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BucksCalendar.Models.Event", b =>
                {
                    b.HasOne("BucksCalendar.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BucksCalendar.Areas.Identity.Data.CalendarUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("BucksCalendar.Models.Notification", b =>
                {
                    b.HasOne("BucksCalendar.Models.Event", "Event")
                        .WithOne("Notification")
                        .HasForeignKey("BucksCalendar.Models.Notification", "EventID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BucksCalendar.Models.NotificationLog", b =>
                {
                    b.HasOne("BucksCalendar.Models.Event", "Event")
                        .WithMany("NotificationLogs")
                        .HasForeignKey("EventID");

                    b.HasOne("BucksCalendar.Models.Notification", "Notification")
                        .WithMany()
                        .HasForeignKey("NotificationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BucksCalendar.Areas.Identity.Data.CalendarUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BucksCalendar.Areas.Identity.Data.CalendarUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BucksCalendar.Areas.Identity.Data.CalendarUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BucksCalendar.Areas.Identity.Data.CalendarUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
